pipeline {
    agent any

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        stage('Fetch Branches') {
            steps {
                script {
                    checkout([$class: 'GitSCM', branches: [[name: '*/**']], userRemoteConfigs: [[url: 'https://github.com/cyse7125-su24-team03/cve-operator.git', credentialsId: 'csye7125-github-webhook-pat']]])
                }
            }
        }
        stage('Validate Commit Messages') {
            steps {
                script {
                    def statusMessage = "Checking for conventional commits has started"
                    githubNotify context: 'checking-commit-message-format', status: 'PENDING', description: statusMessage
                    def commitMessages = sh(
                        script: "git log --format=%s refs/remotes/origin/${env.CHANGE_TARGET}..refs/remotes/origin/PR-${env.CHANGE_ID} --",
                        returnStdout: true
                    ).trim().split('\n')

                    def pattern = ~/^(feat|fix|docs|style|refactor|perf|test|chore|build|ci|revert)(\([a-z0-9\-]+\))?:\s.*/

                    def invalidCommits = commitMessages.findAll { !it.matches(pattern) }

                    if (invalidCommits) {
                        def invalidMessage = invalidCommits.join('\n')
                        statusMessage = "Commits are not in the correct format"
                        githubNotify context: 'checking-commit-message-format', status: 'FAILURE', description: statusMessage
                        error "The following commits do not follow Conventional Commits format:\n${invalidMessage}"
                    } else {
                        statusMessage = "Commits are in the correct format"
                        githubNotify context: 'checking-commit-message-format', status: 'SUCCESS', description: statusMessage
                        echo "All commit messages follow Conventional Commits format."
                    }
                }
            }
        }
    }
}