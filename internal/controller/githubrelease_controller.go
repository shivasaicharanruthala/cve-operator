/*
Copyright 2024.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package controller

import (
	"context"
	"time"

	batchv1 "k8s.io/api/batch/v1"
	corev1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/types"
	processorsv1 "kops.neuadvcloud.xyz/cve-operator/api/v1"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/controller/controllerutil"
	"sigs.k8s.io/controller-runtime/pkg/log"
	"sigs.k8s.io/controller-runtime/pkg/log/zap"
)

// GithubReleaseReconciler reconciles a GithubRelease object
type GithubReleaseReconciler struct {
	client.Client
	Scheme *runtime.Scheme
}

// +kubebuilder:rbac:groups=processors.kops.neuadvcloud.xyz,resources=githubreleases,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=processors.kops.neuadvcloud.xyz,resources=githubreleases/status,verbs=get;update;patch
// +kubebuilder:rbac:groups=processors.kops.neuadvcloud.xyz,resources=githubreleases/finalizers,verbs=update
// +kubebuilder:rbac:groups=batch,resources=jobs,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=batch,resources=jobs/status,verbs=get

// Reconcile is part of the main kubernetes reconciliation loop which aims to
// move the current state of the cluster closer to the desired state.
// TODO(user): Modify the Reconcile function to compare the state specified by
// the GithubRelease object against the actual cluster state, and then
// perform operations to make the cluster state reflect the state specified by
// the user.
//
// For more details, check Reconcile and its Result here:
// - https://pkg.go.dev/sigs.k8s.io/controller-runtime@v0.18.4/pkg/reconcile
func (r *GithubReleaseReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {

	log.SetLogger(zap.New())

	log := log.Log.WithName("controllers").WithName("GithubRelease")

	// TODO(user): your logic here

	// Fetch the GithubRelease instance
	var githubRelease processorsv1.GithubRelease
	if err := r.Get(ctx, req.NamespacedName, &githubRelease); err != nil {
		if errors.IsNotFound(err) {
			log.Info("GithubRelease resource not found. Ignore if deleted.")
			return ctrl.Result{}, nil
		}
		log.Error(err, "Failed to get GithubRelease.")
		return ctrl.Result{}, err
	}

	// name of our custom finalizer
	myFinalizerName := "batch.tutorial.kubebuilder.io/finalizer"

	// examine DeletionTimestamp to determine if object is under deletion
	if githubRelease.ObjectMeta.DeletionTimestamp.IsZero() {
		// The object is not being deleted, so if it does not have our finalizer,
		// then lets add the finalizer and update the object. This is equivalent
		// to registering our finalizer.
		if !controllerutil.ContainsFinalizer(&githubRelease, myFinalizerName) {
			controllerutil.AddFinalizer(&githubRelease, myFinalizerName)
			if err := r.Update(ctx, &githubRelease); err != nil {
				return ctrl.Result{}, err
			}
		}
	} else {
		// The object is being deleted
		if controllerutil.ContainsFinalizer(&githubRelease, myFinalizerName) {
			// our finalizer is present, so lets handle any external dependency
			if err := r.deleteExternalResources(githubRelease); err != nil {
				// if fail to delete the external dependency here, return with error
				// so that it can be retried.
				return ctrl.Result{}, err
			}

			// remove our finalizer from the list and update it.
			controllerutil.RemoveFinalizer(&githubRelease, myFinalizerName)
			if err := r.Update(ctx, &githubRelease); err != nil {
				return ctrl.Result{}, err
			}
		}

		// Stop reconciliation as the item is being deleted
		return ctrl.Result{}, nil
	}

	// List child jobs
	var childJobs batchv1.JobList
	if err := r.List(ctx, &childJobs, client.InNamespace(req.Namespace), client.MatchingFields{"metadata.ownerReferences.uid": string(githubRelease.UID)}); err != nil {
		log.Error(err, "Failed to list child Jobs.")
		return ctrl.Result{}, err
	}

	var activeJobs []*batchv1.Job
	var successfulJobs []*batchv1.Job
	var failedJobs []*batchv1.Job

	isJobFinished := func(job *batchv1.Job) (bool, batchv1.JobConditionType) {
		for _, c := range job.Status.Conditions {
			if (c.Type == batchv1.JobComplete || c.Type == batchv1.JobFailed) && c.Status == corev1.ConditionTrue {
				return true, c.Type
			}
		}

		return false, ""
	}

	for i, job := range childJobs.Items {
		_, finishedType := isJobFinished(&job)
		switch finishedType {
		case "": // ongoing
			activeJobs = append(activeJobs, &childJobs.Items[i])
		case batchv1.JobFailed:
			failedJobs = append(failedJobs, &childJobs.Items[i])
		case batchv1.JobComplete:
			successfulJobs = append(successfulJobs, &childJobs.Items[i])
		}
	}

	// Handle successful job
	if len(successfulJobs) > 0 {
		log.Info("Job has succeeded, no further action.")
		return ctrl.Result{}, nil
	}

	// Handle failed job
	if len(failedJobs) > 0 {
		for _, job := range failedJobs {
			log.Info("Job failed, retrying.", "Job", job.Name)
			if err := r.Delete(ctx, job); err != nil {
				log.Error(err, "Failed to delete failed Job.", "Job", job.Name)
				return ctrl.Result{}, err
			}
		}
	}

	// Handle active job
	if len(activeJobs) > 0 {
		log.Info("Job is still running.", "Job", activeJobs[0].Name)
		return ctrl.Result{RequeueAfter: 10 * time.Second}, nil
	}

	// Check if the Job already exists
	var job batchv1.Job
	err := r.Get(ctx, types.NamespacedName{Name: githubRelease.Name, Namespace: githubRelease.Namespace}, &job)
	if err != nil && !errors.IsNotFound(err) {
		return ctrl.Result{}, err
	}

	// If the Job doesn't exist, create it
	if errors.IsNotFound(err) {
		job := r.constructJobForGithubRelease(&githubRelease)
		if err := r.Create(ctx, job); err != nil {
			log.Error(err, "Failed to create Job for GithubRelease.")
			return ctrl.Result{}, err
		}
	}

	// Update the status of the GithubRelease
	githubRelease.Status.LastProcessedTime = &metav1.Time{Time: time.Now()}
	if err := r.Status().Update(ctx, &githubRelease); err != nil {
		log.Error(err, "Failed to update GithubRelease status.")
		return ctrl.Result{}, err
	}

	return ctrl.Result{}, nil
}

func (r *GithubReleaseReconciler) deleteExternalResources(githubRelease processorsv1.GithubRelease) error {
	// List all child Jobs owned by this GithubRelease
	var childJobs batchv1.JobList
	if err := r.List(context.Background(), &childJobs, client.InNamespace(githubRelease.Namespace), client.MatchingFields{"metadata.ownerReferences.uid": string(githubRelease.UID)}); err != nil {
		return err
	}

	for _, job := range childJobs.Items {
		if err := r.Delete(context.Background(), &job); err != nil {
			return err
		}
	}

	return nil
}

func (r *GithubReleaseReconciler) constructJobForGithubRelease(githubRelease *processorsv1.GithubRelease) *batchv1.Job {

	// DeepCopy the Job template
	jobTemplate := githubRelease.Spec.JobTemplate.DeepCopy()

	job := &batchv1.Job{
		ObjectMeta: metav1.ObjectMeta{
			Name:      githubRelease.Name,
			Namespace: githubRelease.Namespace,
		},
		Spec: jobTemplate.Spec,
	}

	// Append the new environment variable
	job.Spec.Template.Spec.Containers[0].Env = append(job.Spec.Template.Spec.Containers[0].Env, corev1.EnvVar{
		Name:  "CVE_ZIP_FILE_URL",
		Value: githubRelease.Spec.URL,
	})

	ctrl.SetControllerReference(githubRelease, job, r.Scheme)
	return job
}

// SetupWithManager sets up the controller with the Manager.
func (r *GithubReleaseReconciler) SetupWithManager(mgr ctrl.Manager) error {
	// Indexer for listing child Jobs
	if err := mgr.GetFieldIndexer().IndexField(context.Background(), &batchv1.Job{}, "metadata.ownerReferences.uid", func(rawObj client.Object) []string {
		// grab the job object, extract the owner...
		job := rawObj.(*batchv1.Job)
		owner := metav1.GetControllerOf(job)
		if owner == nil {
			return nil
		}
		// ...make sure it's a GitHubRelease...
		if owner.APIVersion != processorsv1.GroupVersion.String() || owner.Kind != "GithubRelease" {
			return nil
		}
		// ...and if so, return it
		return []string{string(owner.UID)}
	}); err != nil {
		return err
	}

	return ctrl.NewControllerManagedBy(mgr).
		For(&processorsv1.GithubRelease{}).
		Owns(&batchv1.Job{}).
		Complete(r)
}
