/*
Copyright 2024.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package v1

import (
	batchv1 "k8s.io/api/batch/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// GithubReleasesMonitorSpec defines the desired state of GithubReleasesMonitor
type GithubReleasesMonitorSpec struct {

	// Repository url to check releases for
	RepoUrl string `json:"repoUrl,omitempty"`

	// Date to monitor from or now
	MonitorFrom string `json:"monitorFrom,omitempty"`

	// Job spec to passdown to the GithubRelease
	JobTemplate batchv1.JobTemplateSpec `json:"jobTemplate,omitempty"`
}

// GithubReleasesMonitorStatus defines the observed state of GithubReleasesMonitor
type GithubReleasesMonitorStatus struct {

	// List of active githubreleases for the monitor
	// +optional
	OwnedGithubReleases map[string]*GithubRelease `json:"ownedGithubReleases,omitempty"`

	// Information about what was the last time a release was processed.
	// +optional
	LastProcessedReleaseTime *metav1.Time `json:"lastProcessedReleaseTime,omitempty"`

	// List of all githubReleases from the monitorFrom time
	// +optional
	ReleaseNamesFromRepositories []string `json:"releaseNamesFromRepositories,omitempty"`

	// Latest time the releases were retrieved
	// + optional
	LatestRetrievedTime *metav1.Time `json:"latestRetrievedTime,omitempty"`

	// Monitor from time
	// +optional
	MonitorFromTime *metav1.Time `json:"monitorFromTime,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status

// GithubReleasesMonitor is the Schema for the githubreleasesmonitors API
type GithubReleasesMonitor struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   GithubReleasesMonitorSpec   `json:"spec,omitempty"`
	Status GithubReleasesMonitorStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GithubReleasesMonitorList contains a list of GithubReleasesMonitor
type GithubReleasesMonitorList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GithubReleasesMonitor `json:"items"`
}

func init() {
	SchemeBuilder.Register(&GithubReleasesMonitor{}, &GithubReleasesMonitorList{})
}
